/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fakecompany.combineddata;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CombinedData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8806898096319632937L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CombinedData\",\"namespace\":\"com.fakecompany.combineddata\",\"fields\":[{\"name\":\"metrics\",\"type\":{\"type\":\"record\",\"name\":\"Metrics\",\"namespace\":\"com.fakecompany.metrics\",\"fields\":[{\"name\":\"addr\",\"type\":\"long\"},{\"name\":\"octets\",\"type\":\"long\"},{\"name\":\"packets\",\"type\":\"long\"},{\"name\":\"tcpFlags\",\"type\":{\"type\":\"map\",\"values\":\"long\"}}]}},{\"name\":\"adjacency\",\"type\":{\"type\":\"record\",\"name\":\"AdjacencyList\",\"namespace\":\"com.fakecompany.adjacencylist\",\"fields\":[{\"name\":\"addr\",\"type\":\"long\"},{\"name\":\"neighbors\",\"type\":{\"type\":\"array\",\"items\":\"long\"}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CombinedData> ENCODER =
      new BinaryMessageEncoder<CombinedData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CombinedData> DECODER =
      new BinaryMessageDecoder<CombinedData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<CombinedData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<CombinedData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CombinedData>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this CombinedData to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a CombinedData from a ByteBuffer. */
  public static CombinedData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public com.fakecompany.metrics.Metrics metrics;
  @Deprecated public com.fakecompany.adjacencylist.AdjacencyList adjacency;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CombinedData() {}

  /**
   * All-args constructor.
   * @param metrics The new value for metrics
   * @param adjacency The new value for adjacency
   */
  public CombinedData(com.fakecompany.metrics.Metrics metrics, com.fakecompany.adjacencylist.AdjacencyList adjacency) {
    this.metrics = metrics;
    this.adjacency = adjacency;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return metrics;
    case 1: return adjacency;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: metrics = (com.fakecompany.metrics.Metrics)value$; break;
    case 1: adjacency = (com.fakecompany.adjacencylist.AdjacencyList)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'metrics' field.
   * @return The value of the 'metrics' field.
   */
  public com.fakecompany.metrics.Metrics getMetrics() {
    return metrics;
  }

  /**
   * Sets the value of the 'metrics' field.
   * @param value the value to set.
   */
  public void setMetrics(com.fakecompany.metrics.Metrics value) {
    this.metrics = value;
  }

  /**
   * Gets the value of the 'adjacency' field.
   * @return The value of the 'adjacency' field.
   */
  public com.fakecompany.adjacencylist.AdjacencyList getAdjacency() {
    return adjacency;
  }

  /**
   * Sets the value of the 'adjacency' field.
   * @param value the value to set.
   */
  public void setAdjacency(com.fakecompany.adjacencylist.AdjacencyList value) {
    this.adjacency = value;
  }

  /**
   * Creates a new CombinedData RecordBuilder.
   * @return A new CombinedData RecordBuilder
   */
  public static com.fakecompany.combineddata.CombinedData.Builder newBuilder() {
    return new com.fakecompany.combineddata.CombinedData.Builder();
  }

  /**
   * Creates a new CombinedData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CombinedData RecordBuilder
   */
  public static com.fakecompany.combineddata.CombinedData.Builder newBuilder(com.fakecompany.combineddata.CombinedData.Builder other) {
    return new com.fakecompany.combineddata.CombinedData.Builder(other);
  }

  /**
   * Creates a new CombinedData RecordBuilder by copying an existing CombinedData instance.
   * @param other The existing instance to copy.
   * @return A new CombinedData RecordBuilder
   */
  public static com.fakecompany.combineddata.CombinedData.Builder newBuilder(com.fakecompany.combineddata.CombinedData other) {
    return new com.fakecompany.combineddata.CombinedData.Builder(other);
  }

  /**
   * RecordBuilder for CombinedData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CombinedData>
    implements org.apache.avro.data.RecordBuilder<CombinedData> {

    private com.fakecompany.metrics.Metrics metrics;
    private com.fakecompany.metrics.Metrics.Builder metricsBuilder;
    private com.fakecompany.adjacencylist.AdjacencyList adjacency;
    private com.fakecompany.adjacencylist.AdjacencyList.Builder adjacencyBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fakecompany.combineddata.CombinedData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.metrics)) {
        this.metrics = data().deepCopy(fields()[0].schema(), other.metrics);
        fieldSetFlags()[0] = true;
      }
      if (other.hasMetricsBuilder()) {
        this.metricsBuilder = com.fakecompany.metrics.Metrics.newBuilder(other.getMetricsBuilder());
      }
      if (isValidValue(fields()[1], other.adjacency)) {
        this.adjacency = data().deepCopy(fields()[1].schema(), other.adjacency);
        fieldSetFlags()[1] = true;
      }
      if (other.hasAdjacencyBuilder()) {
        this.adjacencyBuilder = com.fakecompany.adjacencylist.AdjacencyList.newBuilder(other.getAdjacencyBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing CombinedData instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fakecompany.combineddata.CombinedData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.metrics)) {
        this.metrics = data().deepCopy(fields()[0].schema(), other.metrics);
        fieldSetFlags()[0] = true;
      }
      this.metricsBuilder = null;
      if (isValidValue(fields()[1], other.adjacency)) {
        this.adjacency = data().deepCopy(fields()[1].schema(), other.adjacency);
        fieldSetFlags()[1] = true;
      }
      this.adjacencyBuilder = null;
    }

    /**
      * Gets the value of the 'metrics' field.
      * @return The value.
      */
    public com.fakecompany.metrics.Metrics getMetrics() {
      return metrics;
    }

    /**
      * Sets the value of the 'metrics' field.
      * @param value The value of 'metrics'.
      * @return This builder.
      */
    public com.fakecompany.combineddata.CombinedData.Builder setMetrics(com.fakecompany.metrics.Metrics value) {
      validate(fields()[0], value);
      this.metricsBuilder = null;
      this.metrics = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'metrics' field has been set.
      * @return True if the 'metrics' field has been set, false otherwise.
      */
    public boolean hasMetrics() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'metrics' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fakecompany.metrics.Metrics.Builder getMetricsBuilder() {
      if (metricsBuilder == null) {
        if (hasMetrics()) {
          setMetricsBuilder(com.fakecompany.metrics.Metrics.newBuilder(metrics));
        } else {
          setMetricsBuilder(com.fakecompany.metrics.Metrics.newBuilder());
        }
      }
      return metricsBuilder;
    }

    /**
     * Sets the Builder instance for the 'metrics' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fakecompany.combineddata.CombinedData.Builder setMetricsBuilder(com.fakecompany.metrics.Metrics.Builder value) {
      clearMetrics();
      metricsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'metrics' field has an active Builder instance
     * @return True if the 'metrics' field has an active Builder instance
     */
    public boolean hasMetricsBuilder() {
      return metricsBuilder != null;
    }

    /**
      * Clears the value of the 'metrics' field.
      * @return This builder.
      */
    public com.fakecompany.combineddata.CombinedData.Builder clearMetrics() {
      metrics = null;
      metricsBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'adjacency' field.
      * @return The value.
      */
    public com.fakecompany.adjacencylist.AdjacencyList getAdjacency() {
      return adjacency;
    }

    /**
      * Sets the value of the 'adjacency' field.
      * @param value The value of 'adjacency'.
      * @return This builder.
      */
    public com.fakecompany.combineddata.CombinedData.Builder setAdjacency(com.fakecompany.adjacencylist.AdjacencyList value) {
      validate(fields()[1], value);
      this.adjacencyBuilder = null;
      this.adjacency = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'adjacency' field has been set.
      * @return True if the 'adjacency' field has been set, false otherwise.
      */
    public boolean hasAdjacency() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'adjacency' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fakecompany.adjacencylist.AdjacencyList.Builder getAdjacencyBuilder() {
      if (adjacencyBuilder == null) {
        if (hasAdjacency()) {
          setAdjacencyBuilder(com.fakecompany.adjacencylist.AdjacencyList.newBuilder(adjacency));
        } else {
          setAdjacencyBuilder(com.fakecompany.adjacencylist.AdjacencyList.newBuilder());
        }
      }
      return adjacencyBuilder;
    }

    /**
     * Sets the Builder instance for the 'adjacency' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fakecompany.combineddata.CombinedData.Builder setAdjacencyBuilder(com.fakecompany.adjacencylist.AdjacencyList.Builder value) {
      clearAdjacency();
      adjacencyBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'adjacency' field has an active Builder instance
     * @return True if the 'adjacency' field has an active Builder instance
     */
    public boolean hasAdjacencyBuilder() {
      return adjacencyBuilder != null;
    }

    /**
      * Clears the value of the 'adjacency' field.
      * @return This builder.
      */
    public com.fakecompany.combineddata.CombinedData.Builder clearAdjacency() {
      adjacency = null;
      adjacencyBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CombinedData build() {
      try {
        CombinedData record = new CombinedData();
        if (metricsBuilder != null) {
          record.metrics = this.metricsBuilder.build();
        } else {
          record.metrics = fieldSetFlags()[0] ? this.metrics : (com.fakecompany.metrics.Metrics) defaultValue(fields()[0]);
        }
        if (adjacencyBuilder != null) {
          record.adjacency = this.adjacencyBuilder.build();
        } else {
          record.adjacency = fieldSetFlags()[1] ? this.adjacency : (com.fakecompany.adjacencylist.AdjacencyList) defaultValue(fields()[1]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CombinedData>
    WRITER$ = (org.apache.avro.io.DatumWriter<CombinedData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CombinedData>
    READER$ = (org.apache.avro.io.DatumReader<CombinedData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
